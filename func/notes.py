# notes.py
import json
import telebot

from .errorLogger import log_activity, logger

with open('config.json', 'r') as config_file:
    config = json.load(config_file)
    ALLOWED_USERS = config['ALLOWED_USERS']
    notes_file = config['notes_file']

def load_notes():
    try:
        with open(notes_file, 'r', encoding='utf-8') as file:
            notes = json.load(file)
    except FileNotFoundError:
        notes = []  # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if not isinstance(notes, list):
        notes = []  # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    return notes

def save_notes(notes):
    with open(notes_file, 'w', encoding='utf-8') as file:
        json.dump(notes, file, ensure_ascii=False, indent=4)

def new_note_command(message, bot):

    log_activity(message, "create_note")
    logger.info(f"User ID: {message.chat.id}, Action: create_note")
    
    if message.chat.id in ALLOWED_USERS:
        bot.reply_to(message, "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:")
        bot.register_next_step_handler(message, process_title_step, bot)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


def process_title_step(message, bot):
    if message.chat.id in ALLOWED_USERS:
        chat_id = message.chat.id
        title = message.text
        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏: {title}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏:")
        bot.register_next_step_handler(message, process_content_step, title, bot)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


def process_content_step(message, title, bot):
    if message.chat.id in ALLOWED_USERS:
        chat_id = message.chat.id
        content = message.text

        new_note = {
            'title': title,
            'content': content
        }

        notes = load_notes()
        notes.append(new_note)
        save_notes(notes)
        bot.send_message(chat_id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


def view_notes_command(call,message, bot):
    log_activity(message, "view_notes")
    logger.info(f"User ID: {message.chat.id}, Action: view_notes")

    if call.message.chat.id in ALLOWED_USERS:
        notes = load_notes()
        if notes:
            for i, note in enumerate(notes):
                markup = telebot.types.InlineKeyboardMarkup()
                markup.row(
                    telebot.types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f'delete_note_{i}'),
                    telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f'edit_note_{i}')
                )
                bot.send_message(call.message.chat.id, f"üìå <b>{note['title']}</b>\n{note['content']}", parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")


def delete_note_command(call,message, bot):
    log_activity(message, "delete_note")
    logger.info(f"User ID: {message.chat.id}, Action: delete_note")

    if call.message.chat.id in ALLOWED_USERS:
        note_index = int(call.data.split('_')[2])
        notes = load_notes()
        if 0 <= note_index < len(notes):
            deleted_note = notes.pop(note_index)
            save_notes(notes)
            bot.send_message(call.message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞ '{deleted_note['title']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ—Ç–∫–∏.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

def edit_note_command(call, bot):
    log_activity(call.message, "edit_note")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ call.message
    logger.info(f"User ID: {call.message.chat.id}, Action: edit_note")

    note_index = int(call.data.split('_')[2])
    notes = load_notes()
    if 0 <= note_index < len(notes):
        bot.send_message(call.message.chat.id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏: {notes[note_index]['title']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        bot.register_next_step_handler(call.message, process_edit_title_step, note_index, bot)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_edit_title_step(message, note_index, bot):
    chat_id = message.chat.id
    new_title = message.text
    bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {new_title}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
    bot.register_next_step_handler(message, process_edit_content_step, note_index, new_title, bot)

def process_edit_content_step(message, note_index, new_title, bot):
    chat_id = message.chat.id
    new_content = message.text

    notes = load_notes()
    if 0 <= note_index < len(notes):
        notes[note_index]['title'] = new_title
        notes[note_index]['content'] = new_content
        save_notes(notes)
        bot.send_message(chat_id, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")