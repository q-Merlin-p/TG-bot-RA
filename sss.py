import telebot
import tempfile
import json
from PIL  import ImageGrab 
import os
import pyautogui
from colorama import init, Fore, Style
from func.functions import *

init()

with open('config.json', 'r') as config_file:
    config = json.load(config_file)
    API_TOKEN = config['API_TOKEN']
    ALLOWED_USERS = config['ALLOWED_USERS']
    PROGRAM_PATHS = config['PROGRAM_PATHS']
    notes_file = config['notes_file']
    botVersion = config['botVersion']
    dataUpdate = config['dataUpdate']

bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    print("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message.chat.id)
    print("ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", ALLOWED_USERS)
    if message.chat.id in ALLOWED_USERS:
        markup = start_menu_markup()
        bot.send_message(message.chat.id, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def start_menu_markup():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üíª–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—èüíª","üéÆ –ü—Ä–æ–≥—Ä–∞–º–º—ã üéµ","üéÆ –î–æ—Ç–∞ 2üÉè")
    markup.add("üí¨ –ó–∞–º–µ—Ç–∫–∏","üó®Ô∏è –û–±—â–µ–Ω–∏–µ","üåê –ë—Ä–∞—É–∑–µ—Ä")
    return markup

@bot.message_handler(regexp='–ó–∞–º–µ—Ç–∫–∏')
def note(message):
    if message.chat.id in ALLOWED_USERS:
        markup = note_actions_markup()
        bot.send_message(message.chat.id, 'üó®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def note_actions_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(telebot.types.InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='new_note_command'))
    markup.row(telebot.types.InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫", callback_data='view_notes_command'))
    
    return markup

@bot.message_handler(commands=['newnote'])
def handle_new_note_command(message):
    new_note_command(message, bot)

@bot.callback_query_handler(func=lambda call: call.data == 'view_notes_command')
def handle_view_notes_command(call):
    view_notes_command(call, bot)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_note_'))
def handle_delete_note_command(call):
    delete_note_command(call, bot)

@bot.message_handler(regexp='–¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è')
def other_actions(message):
    if message.chat.id in ALLOWED_USERS:
        markup = other_actions_markup()
        bot.send_message(message.chat.id, 'üíª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def other_actions_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    
    markup.row(
        telebot.types.InlineKeyboardButton("üí§ Sleep Mode", callback_data='sleep'),
        telebot.types.InlineKeyboardButton("‚ùå OFF PC", callback_data='shutdown'),
        telebot.types.InlineKeyboardButton("üîÑ Reboot PC", callback_data='reboot'))
    
    markup.row(
        telebot.types.InlineKeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data='take_screenshot'),
        telebot.types.InlineKeyboardButton("üé• On/off –û—Ç–∫–∞—Ç", callback_data='press_pause_button'))

    markup.row(telebot.types.InlineKeyboardButton("üîÑ –ê–ª—å—Ç–∞–± üîÑ", callback_data='alt_tab'))
    markup.row(telebot.types.InlineKeyboardButton("üßº –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏",callback_data="cls"))
    markup.row(telebot.types.InlineKeyboardButton("üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ü–ö", callback_data='uptime'))
    return markup

@bot.message_handler(regexp='—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç')
def take_screenshot(message):
    if message.chat.id in ALLOWED_USERS:
        try:
            path = tempfile.gettempdir() + 'screenshot.png'
            screenshot = ImageGrab.grab()
            screenshot.save(path, 'PNG')
            bot.send_photo(message.chat.id, open(path, 'rb'))
            bot.send_message(message.chat.id, 'üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}', exc_info=True)
            bot.send_message(message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')


@bot.message_handler(regexp='–ü—Ä–æ–≥—Ä–∞–º–º—ã')
def other_actions(message):
    if message.chat.id in ALLOWED_USERS:
        markup = program_markup()
        bot.send_message(message.chat.id, 'üíª –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º—É:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def program_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("üéÆ Majestic", callback_data='turn_on_MLauncer'),
        telebot.types.InlineKeyboardButton("‚ô® steam",callback_data="launch_steam"),
        telebot.types.InlineKeyboardButton("‚ò¢ Rust", callback_data="lauch_rust"))
    markup.row(
        telebot.types.InlineKeyboardButton("üë®üèº‚Äçüíª VSC", callback_data="launch_vsc"),
        telebot.types.InlineKeyboardButton("ü¶ä Firefox", callback_data="launch_FIREFOX"))
    return markup

@bot.message_handler(regexp='–î–æ—Ç–∞')
def chat(message):
    if message.chat.id in ALLOWED_USERS:
        markup = dota_actions_markup()
        bot.send_message(message.chat.id, 'üíª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –î–æ—Ç–µ:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def dota_actions_markup():
    markup = telebot.types.InlineKeyboardMarkup()

    markup.row(
        telebot.types.InlineKeyboardButton("üéÆ –ó–∞–ø—É—Å–∫ –¥–æ—Ç—ã",callback_data="launch_dota_two"),
        telebot.types.InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Ç—ã",callback_data="exet_dota"))

    markup.row(telebot.types.InlineKeyboardButton("üåä –ü—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É", callback_data="accept_game"))
    markup.row(telebot.types.InlineKeyboardButton("ü©∏ –ó–∞–±–∞–Ω–∏—Ç—å –≥–µ—Ä–æ—è", callback_data="ban_hero"))

    markup.row(
        telebot.types.InlineKeyboardButton("üéÉ –ü–∏–∫ (SF)", callback_data="pick_hero"),
        telebot.types.InlineKeyboardButton("üíÄ –ü–∏–∫ (PA)", callback_data="pick_hero_rez"))
    
    return markup 

@bot.message_handler(regexp='–æ–±—â–µ–Ω–∏–µ')
def chat(message):
    if message.chat.id in ALLOWED_USERS:
        markup = control_markup()
        bot.send_message(message.chat.id, 'üó®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def control_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    
    markup.row(
        telebot.types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å Discord", callback_data='turn_on_discord'),
        telebot.types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å Discord", callback_data='turn_off_discord'))
    
    markup.row(
        telebot.types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å Telegram", callback_data='turn_on_telegram'),
        telebot.types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å Telegram", callback_data='turn_off_telegram'))
    return markup

@bot.message_handler(regexp='–±—Ä–∞—É–∑–µ—Ä')
def open_browser(message):
    if message.chat.id in ALLOWED_USERS:
        markup = browser_markup()
        bot.send_message(message.chat.id, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')

def browser_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üé• –Æ—Ç—É–±", callback_data='open_url_youtube'),
        telebot.types.InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data='open_url_music'))
    
    markup.add(
        telebot.types.InlineKeyboardButton("üéû –ö–∏–Ω–æ", callback_data='open_url_kino'),
        telebot.types.InlineKeyboardButton("üìº –°–µ—Ä–∏–∞–ª—ã",callback_data="open_url_serials"))

    markup.row(
        telebot.types.InlineKeyboardButton("üñº –ê–Ω–∏–º–µ", callback_data='open_url_anime'),
        telebot.types.InlineKeyboardButton("üê±‚Äçüë§ –ê–Ω–∏–º–µ",callback_data="open_url_anime2"))

    markup.add(telebot.types.InlineKeyboardButton("üì¨ ChatGPT", callback_data='open_url_GPT'))
    markup.add(telebot.types.InlineKeyboardButton("‚òé Nekto", callback_data='open_url_NEKTO'))

    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.message.chat.id in ALLOWED_USERS:
        action = call.data
        try:
            actions = {
                'new_note_command': lambda msg: new_note_command(msg, bot),
                'turn_on_discord': turn_on_discord,
                'turn_off_discord': turn_off_discord,
                'turn_on_telegram': turn_on_telegram,
                'turn_off_telegram': turn_off_telegram,
                'turn_on_MLauncer': turn_on_MLauncer,
                'launch_dota_two': launch_dota_two,
                'launch_steam': launch_steam,
                'launch_vsc': launch_vsc,
                'launch_FIREFOX': launch_FIREFOX,
                'lauch_rust': lauch_rust,
                'accept_game': accept_game,
                'ban_hero': ban_hero,
                'pick_hero': pick_hero,
                'pick_hero_rez': pick_hero_rez,
                'cls': lambda msg: (os.system('cls' if os.name == 'nt' else 'clear'),print(BotInfo), bot.send_message(msg.chat.id, 'üßº –ö–æ–Ω—Å–æ–ª—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞')),
                'alt_tab': lambda msg: (pyautogui.hotkey('alt', 'tab'), bot.send_message(msg.chat.id, 'üîÑ –í–∫–ª–∞–¥–∫–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å')),
                'reboot': lambda msg: (bot.send_message(msg.chat.id, 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...'), os.system("shutdown -r -t 0")),
                'sleep': lambda msg: (bot.send_message(msg.chat.id, 'üí§ –ü–µ—Ä–µ–≤–æ–∂—É –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...'), sleep_computer()),
                'shutdown': lambda msg: (bot.send_message(msg.chat.id, '‚ùå –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...'), os.system("shutdown -s -t 0")),
                'take_screenshot': take_screenshot,
                'press_pause_button': press_pause_button,
                'uptime': send_uptime,
                'edit_note_command': lambda msg: edit_note_command(msg, bot)
            }

            if action.startswith('open_url_'):
                open_url(call.message, get_url_from_action(action))
            elif action.startswith('delete_note_'):
                delete_note_command(call, bot)
            elif action.startswith('edit_note_'):
                edit_note_command(call, bot)
            else:
                if action in actions:
                    actions[action](call.message)
                else:
                    bot.send_message(call.message.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ callback_handler: {str(e)}', exc_info=True)
            bot.send_message(call.message.chat.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
    else:
        bot.send_message(call.message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')


bot.infinity_polling()